------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
openssl genrsa -des3 -out CA.key 2048
Эта команда генерирует закрытый ключ (private key) с использованием алгоритма RSA и сохраняет его в файл CA.key. Опция -des3 указывает на использование алгоритма шифрования DES с тремя ключами для защиты закрытого ключа паролем. Число 2048 задает длину ключа в битах.


openssl req -x509 -new -key CA.key -days 700 -sha256 -out CA.crt
Эта команда генерирует самоподписанный сертификат для центра сертификации (Certification Authority). Опция -x509 указывает, что будет создан сертификат X.509. Опция -new говорит о создании нового запроса на сертификат (Certificate Signing Request - CSR). Опция -key CA.key указывает на использование ранее созданного закрытого ключа. Опция -days 700 задает срок действия сертификата в днях. Опция -sha256 определяет использование алгоритма хэширования SHA-256 для подписи сертификата. И, наконец, опция -out CA.crt определяет имя файла, в который будет сохранен созданный сертификат.


openssl genrsa -des3 -out LAB.key 2048
Эта команда генерирует закрытый ключ для ресурса с использованием алгоритма RSA и сохраняет его в файл LAB.key. Опция -des3 указывает на использование алгоритма шифрования DES с тремя ключами для защиты закрытого ключа паролем. Число 2048 задает длину ключа в битах.


openssl req -new -key LAB.key -out LAB.csr -sha256 -config LAB.cfg
Эта команда создает сертификат запроса (Certificate Signing Request - CSR) для вашего ресурса. Опция -new указывает на создание нового запроса на сертификат. Опция -key LAB.key указывает на использование ранее созданного закрытого ключа. Опция -out LAB.csr задает имя файла, в который будет сохранен сертификат запроса. Опция -sha256 определяет использование алгоритма хэширования SHA-256 для подписи сертификата. Опция -config LAB.cfg указывает на использование файла конфигурации для дополнительных настроек сертификата запроса.


openssl x509 -req -in LAB.csr -CA CA.crt -CAkey CA.key -CAcreateserial -out LAB.crt -days 365 -sha256 -extensions v3_req -extfile LAB.cfg
Эта команда создает самоподписанный сертификат для вашего ресурса на основе сертификата запроса. Опция -req указывает на использование сертификата запроса. Опция -in LAB.csr задает входной файл сертификата запроса. Опция -CA CA.crt указывает на использование корневого сертификата Центра сертификации (CA), созданного ранее. Опция -CAkey CA.key задает закрытый ключ Центра сертификации. Опция -CAcreateserial указывает на создание серийного номера сертификата. Опция -out LAB.crt определяет имя файла, в который будет сохранен самоподписанный сертификат для ресурса. Опция -days 365 задает срок действия сертификата в днях. Опция -sha256 определяет использование алгоритма хэширования SHA-256 для подписи сертификата. Опция -extensions v3_req указывает на использование расширений из файла конфигурации LAB.cfg, которые могут содержать дополнительные параметры сертификата.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Как работает: https://firstssl.ru/faq/general-questions/chto-takoe-https

2. Как проверяется подлинность сертификата: 
	Проверка цепочки доверия (Certificate Chain Verification): В этом шаге сертификат проверяется на предмет наличия цепочки доверия, начинающейся от самоподписанного корневого сертификата и заканчивающейся сертификатом, который требуется проверить. Каждый сертификат в цепочке должен быть подписан с использованием закрытого ключа, соответствующего открытому ключу в следующем сертификате цепочки.
	Проверка подлинности сертификата (Certificate Authenticity Verification): В этом шаге производится проверка, что сертификат был подписан соответствующим Центром сертификации (CA). Это делается путем проверки цифровой подписи, примененной к сертификату с использованием открытого ключа Центра сертификации. 
	Проверка целостности сертификата (Certificate Integrity Verification): В этом шаге производится проверка целостности сертификата. Это включает проверку хэш-суммы сертификата с использованием алгоритма хэширования, указанного в сертификате. 
	Проверка дополнительных данных сертификата (Certificate Data Verification): В этом шаге проверяются дополнительные данные в сертификате, такие как имя домена (для сертификатов SSL/TLS), информация о владельце, срок действия, расширения и другие атрибуты, в зависимости от типа сертификата. 


4. Для чего используется публичный ключ сертификата ресурса: 


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Сертификат - это файл специального вида, который содержит несколько компонентов, основной компонент - это открытый ключ сервера. Для того, чтобы подтвердить подлинность ключа сертификата, удостоверяющий центр подписывает сертификат своим закрытым ключом. Если клиент доверяет удостоверяющему центру, то у него есть открытый ключ удостоверяющего центра. И когда сервер передаёт клиенту сертификат, то клиент может расшифровать электронную подпись, созданную удостоверяющим центром с помощью своего закрытого ключа, для этой цели клиент использует открытый ключ удостоверяющего центра. И если ЭЦП проверить удалось, и клиент доверяет удостоверяющему центру, то клиент может быть уверен, что ключ сервера, находящийся в сертификате, подлинный. 

	-- Как узнать, что открытый ключ, который мы получили, действительно принадлежит корневому центру? 
В ОС создаются хранилища сертификатов и сертификаты этих корневых удостоверяющих центров записываются в это хранилище при установке операционной системы. 

	-- Самоподписанный сертификат.
Сервер создает сертификат сам и подписывает его своим закрытым ключом, не обращаясь для подписи к удостоверяющему центру.  

